@startuml

class DataStoreRegistry {
    get_data_stores(): List[DataStore]
    get_data_store(name): DataStore
    add_data_store(DataStore): void
    remove_data_store(DataStore): void
}

interface DataStore {
    {abstract} query(constraints): DataSource
}

interface DataSource {
    {abstract} get_dataset_schema()
    {abstract} open_dataset(constraints): cdm.Dataset
}

class FileSetDataStore implements DataStore {
    root_dir
    query(constraints): DataSource
}

class FileSetDataSource implements DataSource {
    name
    base_dir
    file_pattern
    get_dataset_schema()
    open_dataset(constraints): cdm.Dataset
}

class FileSetInfo  {
    info_update_time
    start_time
    end_time
    num_files
    size_in_mb
}

DataStoreRegistry o--> "N" DataStore
DataStore  ..>  DataSource: <provide>

DataSource ..>  interface cdm.Dataset: <open>
FileSetDataSource -->  interface cdm.Schema: schema


FileSetDataStore "1" o-- "N" FileSetDataSource
FileSetDataSource -- "0..1" FileSetInfo

note left of FileSetDataStore
Users may create their own.
The default instance mirrors
the CCI Portal's FTP tree.
end note

note left of FileSetDataSource
open_dataset() will look for
actual file types and return
either an <b>netCDF</b> (<i>xarray</i>) or
<b>Shapefile</b> Dataset instance.
end note

object globals {
    DATA_STORE_REGISTRY: DataStoreRegistry
    query_data_sources(data_stores, constraints)
    open_dataset(data_stores, name)
}


@enduml